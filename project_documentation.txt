Project Directory Structure:
=============================
├── src/
│   ├── main/
│   │   ├── kotlin/
│   │   │   ├── org/
│   │   │   │   ├── blackerp/
│   │   │   │   │   ├── infrastructure/
│   │   │   │   │   │   ├── event/
│   │   │   │   │   │   │   └── EventPublisher.kt
│   │   │   │   │   │   ├── store/
│   │   │   │   │   │   │   └── TableStore.kt
│   │   │   │   │   ├── domain/
│   │   │   │   │   │   ├── event/
│   │   │   │   │   │   │   └── EventMetadata.kt
│   │   │   │   │   │   │   └── DomainEvent.kt
│   │   │   │   │   │   │   └── TableCreated.kt
│   │   │   │   │   │   ├── values/
│   │   │   │   │   │   │   └── AccessLevel.kt
│   │   │   │   │   │   │   └── Description.kt
│   │   │   │   │   │   │   └── EventMetadata.kt
│   │   │   │   │   │   │   └── TableName.kt
│   │   │   │   │   │   │   └── DisplayName.kt
│   │   │   │   │   │   ├── table/
│   │   │   │   │   │   │   └── ADTable.kt
│   │   │   │   │   │   │   └── TableCreated.kt
│   │   │   │   │   │   │   └── TableError.kt
│   │   │   │   │   │   └── DomainEntity.kt
│   │   │   │   │   │   └── DomainEvent.kt
│   │   │   │   │   │   └── EntityMetadata.kt
│   │   │   │   │   ├── application/
│   │   │   │   │   │   ├── table/
│   │   │   │   │   │   │   └── CreateTableUseCase.kt
│   │   │   │   │   │   │   └── CreateTableCommand.kt
│   │   │   │   │   ├── shared/
│   │   │   │   │   │   └── ValidationError.kt
│   │   │   │   │   │   └── TimeBasedId.kt
│   │   │   │   │   └── BlackErpApplication.kt
│   ├── test/
│   │   ├── kotlin/
│   │   │   ├── org/
│   │   │   │   ├── blackerp/
│   │   │   │   │   ├── domain/
│   │   │   │   │   │   ├── values/
│   │   │   │   │   │   │   └── DisplayNameTest.kt
│   │   │   │   │   │   │   └── TableNameTest.kt
│   │   │   │   │   │   └── EntityMetadataTest.kt
│   │   │   │   │   ├── application/
│   │   │   │   │   │   ├── table/
│   │   │   │   │   │   │   └── CreateTableUseCaseTest.kt
│   │   │   │   │   ├── shared/
│   │   │   │   │   │   └── TimeBasedIdTest.kt
│   │   │   │   │   │   └── TestFactory.kt
│   │   │   │   │   │   └── KotestConfig.kt
└── settings.gradle.kts
└── build.gradle.kts


Detailed File Documentation:

File: settings.gradle.kts
// Classpath: settings.gradle.kts
rootProject.name = "blackerp"



File: build.gradle.kts
// Classpath: build.gradle.kts
plugins {
    kotlin("jvm") version "1.9.20"
    kotlin("plugin.spring") version "1.9.20"
    id("org.springframework.boot") version "3.2.0"
    id("io.spring.dependency-management") version "1.1.4"
}
group = "org.blackerp"
version = "0.0.1-SNAPSHOT"
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}
springBoot {
    mainClass.set("org.blackerp.BlackErpApplicationKt")
}
repositories {
    mavenCentral()
}
dependencies {
    // Core
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    // Arrow for functional programming
    implementation("io.arrow-kt:arrow-core:1.2.0")
    implementation("io.arrow-kt:arrow-fx-coroutines:1.2.0")
    // Spring minimal
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    // Database
    runtimeOnly("org.postgresql:postgresql")
    runtimeOnly("com.h2database:h2")
    // UUID Generator
    implementation("com.fasterxml.uuid:java-uuid-generator:4.2.0")
    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.7.3")
    // Test dependencies
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude(module = "mockito-core")
    }
    testImplementation("io.kotest:kotest-runner-junit5:5.8.0")
    testImplementation("io.kotest:kotest-assertions-core:5.8.0")
    testImplementation("io.kotest.extensions:kotest-assertions-arrow:1.3.3")
    testImplementation("io.kotest:kotest-property:5.8.0")
    testImplementation("io.kotest:kotest-framework-datatest:5.8.0")
    testImplementation("io.kotest.extensions:kotest-extensions-spring:1.1.3")
    testImplementation("io.mockk:mockk:1.13.8")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3")
}
tasks.withType<Test> {
    useJUnitPlatform()
}
tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
    kotlinOptions {
        freeCompilerArgs = listOf("-Xjsr305=strict")
        jvmTarget = "17"
    }
}


File: src/main/kotlin/org/blackerp/infrastructure/event/EventPublisher.kt
// Classpath: src.main.kotlin.org.blackerp.infrastructure.event.EventPublisher
package org.blackerp.infrastructure.event

import arrow.core.Either
import org.blackerp.domain.event.DomainEvent
import org.blackerp.domain.table.TableError

interface EventPublisher {
    suspend fun publish(event: DomainEvent): Either<TableError, Unit>
}



File: src/main/kotlin/org/blackerp/infrastructure/store/TableStore.kt
// Classpath: src.main.kotlin.org.blackerp.infrastructure.store.TableStore
package org.blackerp.infrastructure.store

import arrow.core.Either
import org.blackerp.domain.table.ADTable
import org.blackerp.domain.table.TableError

interface TableStore {
    suspend fun save(table: ADTable): Either<TableError, ADTable>
}



File: src/main/kotlin/org/blackerp/BlackErpApplication.kt
// Classpath: src.main.kotlin.org.blackerp.BlackErpApplication
// File: src/main/kotlin/org/blackerp/BlackErpApplication.kt
package org.blackerp

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication

@SpringBootApplication
class BlackErpApplication

fun main(args: Array<String>) {
    runApplication<BlackErpApplication>(*args)
}


File: src/main/kotlin/org/blackerp/domain/event/EventMetadata.kt
// Classpath: src.main.kotlin.org.blackerp.domain.event.EventMetadata
package org.blackerp.domain.event

import java.time.Instant
import java.util.UUID

data class EventMetadata(
    val id: UUID,
    val timestamp: Instant,
    val user: String
)



File: src/main/kotlin/org/blackerp/domain/event/DomainEvent.kt
// Classpath: src.main.kotlin.org.blackerp.domain.event.DomainEvent
package org.blackerp.domain.event

interface DomainEvent {
    val metadata: EventMetadata
}



File: src/main/kotlin/org/blackerp/domain/event/TableCreated.kt
// Classpath: src.main.kotlin.org.blackerp.domain.event.TableCreated
package org.blackerp.domain.event

import java.util.UUID

data class TableCreated(
    override val metadata: EventMetadata,
    val tableId: UUID,
    val tableName: String
) : DomainEvent



File: src/main/kotlin/org/blackerp/domain/values/AccessLevel.kt
// Classpath: src.main.kotlin.org.blackerp.domain.values.AccessLevel
package org.blackerp.domain.values

enum class AccessLevel {
    SYSTEM,
    CLIENT,
    ORGANIZATION,
    CLIENT_ORGANIZATION;
    
    companion object {
        fun fromString(value: String): AccessLevel =
            values().find { it.name.equals(value, ignoreCase = true) }
                ?: throw IllegalArgumentException("Invalid access level: $value")
    }
}



File: src/main/kotlin/org/blackerp/domain/values/Description.kt
// Classpath: src.main.kotlin.org.blackerp.domain.values.Description
package org.blackerp.domain.values

import arrow.core.Either
import arrow.core.left
import arrow.core.right
import org.blackerp.shared.ValidationError

@JvmInline
value class Description private constructor(val value: String) {
    companion object {
        fun create(value: String): Either<ValidationError, Description> =
            when {
                value.length > 255 ->
                    ValidationError.InvalidLength("description", 0, 255).left()
                else -> Description(value).right()
            }
    }
}



File: src/main/kotlin/org/blackerp/domain/values/EventMetadata.kt
// Classpath: src.main.kotlin.org.blackerp.domain.values.EventMetadata
package org.blackerp.domain.values

import java.time.Instant
import java.util.UUID

data class EventMetadata(
    val id: UUID,
    val timestamp: Instant,
    val user: String
)



File: src/main/kotlin/org/blackerp/domain/values/TableName.kt
// Classpath: src.main.kotlin.org.blackerp.domain.values.TableName
package org.blackerp.domain.values

import arrow.core.Either
import arrow.core.left
import arrow.core.right
import org.blackerp.shared.ValidationError

@JvmInline
value class TableName private constructor(val value: String) {
    companion object {
        fun create(value: String): Either<ValidationError, TableName> =
            when {
                !value.matches(Regex("^[a-z][a-z0-9_]*$")) ->
                    ValidationError.InvalidFormat("Table name must start with lowercase letter and contain only lowercase letters, numbers, and underscores").left()
                else -> TableName(value).right()
            }
    }
}



File: src/main/kotlin/org/blackerp/domain/values/DisplayName.kt
// Classpath: src.main.kotlin.org.blackerp.domain.values.DisplayName
package org.blackerp.domain.values

import arrow.core.Either
import arrow.core.left
import arrow.core.right
import org.blackerp.shared.ValidationError

@JvmInline
value class DisplayName private constructor(val value: String) {
    companion object {
        fun create(value: String): Either<ValidationError, DisplayName> =
            when {
                value.isBlank() -> 
                    ValidationError.Required("display name").left()
                value.length !in 1..60 ->
                    ValidationError.InvalidLength("display name", 1, 60).left()
                else -> DisplayName(value).right()
            }
    }
}



File: src/main/kotlin/org/blackerp/domain/DomainEntity.kt
// Classpath: src.main.kotlin.org.blackerp.domain.DomainEntity
package org.blackerp.domain

interface DomainEntity {
    val metadata: EntityMetadata
}



File: src/main/kotlin/org/blackerp/domain/table/ADTable.kt
// Classpath: src.main.kotlin.org.blackerp.domain.table.ADTable
package org.blackerp.domain.table

import arrow.core.Either
import arrow.core.right
import org.blackerp.domain.DomainEntity
import org.blackerp.domain.EntityMetadata
import org.blackerp.domain.values.TableName
import org.blackerp.domain.values.DisplayName
import org.blackerp.domain.values.Description
import org.blackerp.domain.values.AccessLevel

data class ADTable(
    override val metadata: EntityMetadata,
    val name: TableName,
    val displayName: DisplayName,
    val description: Description?,
    val accessLevel: AccessLevel
) : DomainEntity {
    companion object {
        fun create(params: CreateTableParams): Either<TableError, ADTable> =
            ADTable(
                metadata = params.metadata,
                name = params.name,
                displayName = params.displayName,
                description = params.description,
                accessLevel = params.accessLevel
            ).right()
    }
}

data class CreateTableParams(
    val metadata: EntityMetadata,
    val name: TableName,
    val displayName: DisplayName,
    val description: Description?,
    val accessLevel: AccessLevel
)



File: src/main/kotlin/org/blackerp/domain/table/TableCreated.kt
// Classpath: src.main.kotlin.org.blackerp.domain.table.TableCreated
package org.blackerp.domain.table

import org.blackerp.domain.DomainEvent
import org.blackerp.domain.values.EventMetadata
import java.util.UUID

data class TableCreated(
    override val metadata: EventMetadata,
    val tableId: UUID,
    val tableName: String
) : DomainEvent



File: src/main/kotlin/org/blackerp/domain/table/TableError.kt
// Classpath: src.main.kotlin.org.blackerp.domain.table.TableError
// File: src/main/kotlin/org/blackerp/domain/table/TableError.kt
package org.blackerp.domain.table

import org.blackerp.shared.ValidationError

sealed interface TableError {
    data class ValidationFailed(val errors: List<ValidationError>) : TableError
    data class StorageError(val cause: Throwable) : TableError
    data class DuplicateTable(val name: String) : TableError
    data class NotFound(val id: String) : TableError
}


File: src/main/kotlin/org/blackerp/domain/DomainEvent.kt
// Classpath: src.main.kotlin.org.blackerp.domain.DomainEvent
package org.blackerp.domain

import org.blackerp.domain.values.EventMetadata

interface DomainEvent {
    val metadata: EventMetadata
}



File: src/main/kotlin/org/blackerp/domain/EntityMetadata.kt
// Classpath: src.main.kotlin.org.blackerp.domain.EntityMetadata
package org.blackerp.domain

import org.blackerp.shared.TimeBasedId
import java.time.Instant
import java.util.UUID

data class EntityMetadata(
    val id: UUID = TimeBasedId.generate(),
    val created: Instant = Instant.now(),
    val createdBy: String,
    val updated: Instant = Instant.now(),
    val updatedBy: String,
    val version: Int = 0,
    val active: Boolean = true
)



File: src/main/kotlin/org/blackerp/application/table/CreateTableUseCase.kt
// Classpath: src.main.kotlin.org.blackerp.application.table.CreateTableUseCase
package org.blackerp.application.table

import arrow.core.Either
import arrow.core.left
import arrow.core.right
import org.blackerp.domain.EntityMetadata
import org.blackerp.domain.table.ADTable
import org.blackerp.domain.table.TableError
import org.blackerp.domain.table.CreateTableParams
import org.blackerp.domain.values.*
import org.blackerp.domain.event.DomainEvent  // Correct import
import org.blackerp.domain.event.TableCreated // Should be in event package
import org.blackerp.domain.event.EventMetadata // Should be in event package
import org.blackerp.infrastructure.store.TableStore
import org.blackerp.infrastructure.event.EventPublisher
import org.blackerp.shared.ValidationError
import java.time.Instant
import java.util.UUID


class CreateTableUseCase(
    private val store: TableStore,
    private val eventPublisher: EventPublisher
) {
    suspend fun execute(command: CreateTableCommand): Either<TableError, ADTable> {
        // Previous validation logic remains the same
        val errors = mutableListOf<ValidationError>()
        
        val name = TableName.create(command.name).fold(
            { errors.add(it); null },
            { it }
        )
        
        val displayName = DisplayName.create(command.displayName).fold(
            { errors.add(it); null },
            { it }
        )
        
        val description = command.description?.let { desc ->
            Description.create(desc).fold(
                { errors.add(it); null },
                { it }
            )
        }

        if (errors.isNotEmpty()) {
            return TableError.ValidationFailed(errors).left()
        }

        val metadata = EntityMetadata(
            createdBy = command.createdBy,
            updatedBy = command.createdBy
        )

        val createResult = ADTable.create(
            CreateTableParams(
                metadata = metadata,
                name = name!!,
                displayName = displayName!!,
                description = description,
                accessLevel = command.accessLevel
            )
        )

        return when(createResult) {
            is Either.Left -> createResult
            is Either.Right -> {
                val savedTable = store.save(createResult.value)
                
                when(savedTable) {
                    is Either.Right -> {
                        val event: DomainEvent = TableCreated(  // Explicit type declaration
                            metadata = EventMetadata(
                                id = UUID.randomUUID(),
                                timestamp = Instant.now(),
                                user = savedTable.value.metadata.createdBy
                            ),
                            tableId = savedTable.value.metadata.id,
                            tableName = savedTable.value.name.value
                        )
                        eventPublisher.publish(event)
                    }
                    is Either.Left -> Unit
                }
                
                savedTable
            }
        }
    }
}


File: src/main/kotlin/org/blackerp/application/table/CreateTableCommand.kt
// Classpath: src.main.kotlin.org.blackerp.application.table.CreateTableCommand
package org.blackerp.application.table

import org.blackerp.domain.values.AccessLevel

data class CreateTableCommand(
    val name: String,
    val displayName: String,
    val description: String?,
    val accessLevel: AccessLevel,
    val createdBy: String
)



File: src/main/kotlin/org/blackerp/shared/ValidationError.kt
// Classpath: src.main.kotlin.org.blackerp.shared.ValidationError
package org.blackerp.shared

sealed class ValidationError(val message: String) {
    data class InvalidFormat(val details: String) : ValidationError(details)
    data class Required(val field: String) : ValidationError("Field $field is required")
    data class InvalidLength(val field: String, val min: Int, val max: Int) : 
        ValidationError("Field $field must be between $min and $max characters")
}



File: src/main/kotlin/org/blackerp/shared/TimeBasedId.kt
// Classpath: src.main.kotlin.org.blackerp.shared.TimeBasedId
package org.blackerp.shared

import com.fasterxml.uuid.Generators
import java.util.UUID

object TimeBasedId {
    private val timeBasedGenerator = Generators.timeBasedGenerator()
    
    fun generate(): UUID = timeBasedGenerator.generate()
}


File: src/test/kotlin/org/blackerp/domain/values/DisplayNameTest.kt
// Classpath: src.test.kotlin.org.blackerp.domain.values.DisplayNameTest
package org.blackerp.domain.values

import io.kotest.core.spec.style.DescribeSpec
import io.kotest.matchers.shouldBe
import arrow.core.Either

class DisplayNameTest : DescribeSpec({
    describe("DisplayName") {
        describe("create") {
            it("should create valid display name") {
                val result = DisplayName.create("Valid Display Name")
                result.isRight() shouldBe true
            }
            
            it("should reject blank name") {
                val result = DisplayName.create("   ")
                result.isLeft() shouldBe true
            }
            
            it("should reject too long name") {
                val result = DisplayName.create("a".repeat(61))
                result.isLeft() shouldBe true
            }
        }
    }
})


File: src/test/kotlin/org/blackerp/domain/values/TableNameTest.kt
// Classpath: src.test.kotlin.org.blackerp.domain.values.TableNameTest
package org.blackerp.domain.values

import io.kotest.core.spec.style.DescribeSpec
import io.kotest.matchers.shouldBe
import arrow.core.Either

class TableNameTest : DescribeSpec({
    describe("TableName") {
        describe("create") {
            it("should create valid table name") {
                val result = TableName.create("valid_table_name")
                result.isRight() shouldBe true
            }
            
            it("should reject invalid format") {
                val result = TableName.create("Invalid Table")
                result.isLeft() shouldBe true
            }
            
            it("should reject name starting with number") {
                val result = TableName.create("1invalid")
                result.isLeft() shouldBe true
            }
        }
    }
})


File: src/test/kotlin/org/blackerp/domain/EntityMetadataTest.kt
// Classpath: src.test.kotlin.org.blackerp.domain.EntityMetadataTest
package org.blackerp.domain

import io.kotest.core.spec.style.DescribeSpec
import io.kotest.matchers.shouldBe
import io.kotest.matchers.shouldNotBe

class EntityMetadataTest : DescribeSpec({
    describe("EntityMetadata") {
        it("should create with default values") {
            val metadata = EntityMetadata(
                createdBy = "test-user",
                updatedBy = "test-user"
            )
            
            metadata.createdBy shouldBe "test-user"
            metadata.updatedBy shouldBe "test-user"
            metadata.version shouldBe 0
            metadata.active shouldBe true
            metadata.id shouldNotBe null
        }

        it("should create with custom values") {
            val metadata = EntityMetadata(
                createdBy = "test-user",
                updatedBy = "test-user",
                version = 1,
                active = false
            )
            
            metadata.version shouldBe 1
            metadata.active shouldBe false
        }
    }
})



File: src/test/kotlin/org/blackerp/application/table/CreateTableUseCaseTest.kt
// Classpath: src.test.kotlin.org.blackerp.application.table.CreateTableUseCaseTest
// File: src/test/kotlin/org/blackerp/application/table/CreateTableUseCaseTest.kt
package org.blackerp.application.table

import io.kotest.core.spec.style.DescribeSpec
import io.kotest.matchers.shouldBe
import io.kotest.matchers.types.shouldBeTypeOf
import io.mockk.coEvery
import io.mockk.mockk
import io.mockk.slot
import arrow.core.right
import kotlinx.coroutines.test.runTest
import org.blackerp.domain.values.AccessLevel
import org.blackerp.domain.table.ADTable
import org.blackerp.domain.table.TableError
import org.blackerp.infrastructure.store.TableStore
import org.blackerp.infrastructure.event.EventPublisher

class CreateTableUseCaseTest : DescribeSpec({
    lateinit var store: TableStore
    lateinit var eventPublisher: EventPublisher
    lateinit var useCase: CreateTableUseCase

    beforeTest {
        store = mockk()
        eventPublisher = mockk(relaxed = true)
        useCase = CreateTableUseCase(store, eventPublisher)
    }

    describe("execute") {
        context("with valid command") {
            val command = CreateTableCommand(
                name = "test_table",
                displayName = "Test Table",
                description = "A test table",
                accessLevel = AccessLevel.SYSTEM,
                createdBy = "test-user"
            )

            it("should create and store table") {
                runTest {
                    // given
                    val tableSlot = slot<ADTable>()
                    coEvery { store.save(capture(tableSlot)) } answers { 
                        tableSlot.captured.right() 
                    }

                    // when
                    val result = useCase.execute(command)

                    // then
                    result.fold(
                        { error -> throw AssertionError("Should not fail: $error") },
                        { table ->
                            table.name.value shouldBe "test_table"
                            table.displayName.value shouldBe "Test Table"
                            table.description?.value shouldBe "A test table"
                            table.accessLevel shouldBe AccessLevel.SYSTEM
                            table.metadata.createdBy shouldBe "test-user"
                        }
                    )
                }
            }
        }

        context("with invalid command") {
            val command = CreateTableCommand(
                name = "Invalid Name!",
                displayName = "",
                description = "A".repeat(300), // Too long
                accessLevel = AccessLevel.SYSTEM,
                createdBy = "test-user"
            )

            it("should return validation errors") {
                runTest {
                    // when
                    val result = useCase.execute(command)

                    // then
                    result.fold(
                        { error ->
                            error.shouldBeTypeOf<TableError.ValidationFailed>()
                            (error as TableError.ValidationFailed).errors.size shouldBe 3
                        },
                        { throw AssertionError("Should not succeed") }
                    )
                }
            }
        }
    }
})


File: src/test/kotlin/org/blackerp/shared/TimeBasedIdTest.kt
// Classpath: src.test.kotlin.org.blackerp.shared.TimeBasedIdTest
package org.blackerp.shared

import io.kotest.core.spec.style.DescribeSpec
import io.kotest.matchers.shouldBe
import io.kotest.matchers.shouldNotBe
import java.util.UUID

class TimeBasedIdTest : DescribeSpec({
    describe("TimeBasedId") {
        describe("generate") {
            it("should generate time-based UUIDs") {
                // Generate two IDs with a small delay
                val id1 = TimeBasedId.generate()
                Thread.sleep(1) // Minimal delay
                val id2 = TimeBasedId.generate()

                // Verify they are different
                id1 shouldNotBe id2

                // Verify version 1 (time-based) UUID
                (id1.version() == 1) shouldBe true
                (id2.version() == 1) shouldBe true
            }
        }
    }
})


File: src/test/kotlin/org/blackerp/shared/TestFactory.kt
// Classpath: src.test.kotlin.org.blackerp.shared.TestFactory
// File: src/test/kotlin/org/blackerp/shared/TestFactory.kt
package org.blackerp.shared

import org.blackerp.domain.EntityMetadata
import org.blackerp.domain.values.Description
import org.blackerp.domain.values.DisplayName
import org.blackerp.domain.values.TableName
import java.time.Instant
import java.util.UUID

object TestFactory {
    fun createMetadata(
        id: UUID = UUID.randomUUID(),
        createdBy: String = "test-user",
        updatedBy: String = createdBy,
        version: Int = 0,
        active: Boolean = true
    ) = EntityMetadata(
        id = id,
        created = Instant.now(),
        createdBy = createdBy,
        updated = Instant.now(),
        updatedBy = updatedBy,
        version = version,
        active = active
    )

    fun createValidTableName(name: String = "test_table") = 
        TableName.create(name).getOrNull()!!

    fun createValidDisplayName(name: String = "Test Table") = 
        DisplayName.create(name).getOrNull()!!

    fun createValidDescription(text: String = "Test description") = 
        Description.create(text).getOrNull()
}


File: src/test/kotlin/org/blackerp/shared/KotestConfig.kt
// Classpath: src.test.kotlin.org.blackerp.shared.KotestConfig
// File: src/test/kotlin/org/blackerp/shared/KotestConfig.kt
package org.blackerp.shared

import io.kotest.core.config.AbstractProjectConfig
import io.kotest.core.spec.IsolationMode
import io.kotest.extensions.spring.SpringExtension

class KotestConfig : AbstractProjectConfig() {
    override val isolationMode = IsolationMode.InstancePerLeaf
    override fun extensions() = listOf(SpringExtension)
}


