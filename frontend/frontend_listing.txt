Generating folder structure...
-------------------------------------------
.
├── frontend_listing.txt
├── frontend.sh
├── generate_project_listing.sh
├── index.html
├── package.json
├── package-lock.json
├── project_listing.txt
├── README.md
├── src
│   ├── api
│   │   ├── mockData.ts
│   │   └── tableApi.ts
│   ├── App.tsx
│   ├── assets
│   ├── components
│   │   ├── tables
│   │   │   ├── CreateTableForm.tsx
│   │   │   ├── DataTableWithState.tsx
│   │   │   ├── DeleteTableDialog.tsx
│   │   │   ├── EditTableForm.tsx
│   │   │   ├── index.ts
│   │   │   └── TableManagement.tsx
│   │   └── ui
│   │   ├── alert-dialog.tsx
│   │   ├── alert.tsx
│   │   ├── button.tsx
│   │   ├── card.tsx
│   │   └── table.tsx
│   ├── hooks
│   │   └── useTableOperations.ts
│   ├── layouts
│   ├── lib
│   │   ├── providers
│   │   │   └── QueryProvider.tsx
│   │   ├── utils
│   │   └── utils.ts
│   ├── main
│   │   └── resources
│   │   └── db
│   │   └── migration
│   ├── main.tsx
│   ├── pages
│   ├── types
│   │   └── table.ts
│   └── utils
├── tsconfig.json
└── tsconfig.node.json

19 directories, 29 files


Generating file details...
-------------------------------------------

File: ./src/hooks/useTableOperations.ts
-------------------------------------------
import {useQuery,useMutation,useQueryClient} from '@tanstack/react-query';
import {Table,CreateTableRequest} from '../types/table';
import {tableApi} from '../api/tableApi';
export function useTableOperations() {
const queryClient=useQueryClient();
const {
data:tables,
isLoading,
error,
}=useQuery<Table[]>({
queryKey:['tables'],
queryFn:() => tableApi.getTables(),
});
const createTableMutation=useMutation({
mutationFn:(newTable:CreateTableRequest) => tableApi.createTable(newTable),
onSuccess:() => {
queryClient.invalidateQueries({queryKey:['tables']});
},
});
const updateTableMutation=useMutation({
mutationFn:({id,table}:{id:string;table:Partial<Table>}) =>
tableApi.updateTable(id,table),
onSuccess:() => {
queryClient.invalidateQueries({queryKey:['tables']});
},
});
const deleteTableMutation=useMutation({
mutationFn:(id:string) => tableApi.deleteTable(id),
onSuccess:() => {
queryClient.invalidateQueries({queryKey:['tables']});
},
});
return {
tables,
isLoading,
error,
createTable:createTableMutation.mutate,
updateTable:updateTableMutation.mutate,
deleteTable:deleteTableMutation.mutate,
isCreating:createTableMutation.isPending,
isUpdating:updateTableMutation.isPending,
isDeleting:deleteTableMutation.isPending,
};
}

File: ./src/main.tsx
-------------------------------------------
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'
ReactDOM.createRoot(document.getElementById('root')!).render(
<React.StrictMode>
<App />
</React.StrictMode>,
)

File: ./src/types/table.ts
-------------------------------------------
export interface Column {
name:string;
displayName:string;
type:string;
mandatory?:boolean;
length?:number;
precision?:number;
scale?:number;
defaultValue?:string;
}
export interface CreateTableRequest {
name:string;
displayName:string;
description?:string;
accessLevel:string;
columns:Column[];
}
export interface Table {
id:string;
name:string;
displayName:string;
description?:string;
accessLevel:string;
columns:Column[];
}

File: ./src/api/tableApi.ts
-------------------------------------------
import {Table,CreateTableRequest} from '../types/table';
const BASE_URL='/api';
export const tableApi={
async getTables():Promise<Table[]> {
try {
const response=await fetch(`${BASE_URL}/tables`);
if (!response.ok) {
const errorData=await response.json();
thrownew Error(errorData.message || 'Failed to fetch tables');
}
const data=await response.json();
return data.tables || [];
} catch (error) {
console.error('Error fetching tables:',error);
throw error;
}
},
async createTable(table:CreateTableRequest):Promise<Table> {
try {
const response=await fetch(`${BASE_URL}/tables`,{
method:'POST',
headers:{
'Content-Type':'application/json',
},
body:JSON.stringify(table),
});
if (!response.ok) {
const errorData=await response.json();
thrownew Error(errorData.message || 'Failed to create table');
}
return await response.json();
} catch (error) {
console.error('Error creating table:',error);
throw error;
}
},
async updateTable({id,table}:{id:string;table:Partial<Table>}):Promise<Table> {
try {
const response=await fetch(`${BASE_URL}/tables/${id}`,{
method:'PUT',
headers:{
'Content-Type':'application/json',
},
body:JSON.stringify(table),
});
if (!response.ok) {
const errorData=await response.json();
thrownew Error(errorData.message || 'Failed to update table');
}
return await response.json();
} catch (error) {
console.error('Error updating table:',error);
throw error;
}
},
async deleteTable(id:string):Promise<void> {
try {
const response=await fetch(`${BASE_URL}/tables/${id}`,{
method:'DELETE',
});
if (!response.ok) {
const errorData=await response.json();
thrownew Error(errorData.message || 'Failed to delete table');
}
} catch (error) {
console.error('Error deleting table:',error);
throw error;
}
}
};
File: ./src/api/mockData.ts
-------------------------------------------
import {Table} from '../types/table';
export const mockTables:Table[]=[
{
id:'1',
name:'business_partner',
displayName:'Business Partner',
description:'Business partner master data including customers and vendors',
accessLevel:'ORGANIZATION',
columns:[
{name:'id',type:'UUID',mandatory:true},
{name:'name',type:'STRING',length:100,mandatory:true},
{name:'tax_id',type:'STRING',length:20},
{name:'email',type:'STRING',length:100},
{name:'phone',type:'STRING',length:20},
{name:'active',type:'BOOLEAN',defaultValue:'true'}
]
},
{
id:'2',
name:'product',
displayName:'Product',
description:'Product master data with inventory and pricing information',
accessLevel:'ORGANIZATION',
columns:[
{name:'id',type:'UUID',mandatory:true},
{name:'code',type:'STRING',length:40,mandatory:true},
{name:'name',type:'STRING',length:100,mandatory:true},
{name:'description',type:'STRING',length:255},
{name:'price',type:'DECIMAL',precision:10,scale:2,mandatory:true},
{name:'cost',type:'DECIMAL',precision:10,scale:2},
{name:'stock',type:'INTEGER',defaultValue:'0'}
]
},
{
id:'3',
name:'sales_order',
displayName:'Sales Order',
description:'Customer orders with line items and tracking',
accessLevel:'ORGANIZATION',
columns:[
{name:'id',type:'UUID',mandatory:true},
{name:'order_date',type:'TIMESTAMP',mandatory:true},
{name:'customer_id',type:'UUID',mandatory:true},
{name:'total_amount',type:'DECIMAL',precision:12,scale:2},
{name:'status',type:'STRING',length:20,defaultValue:'DRAFT'},
{name:'notes',type:'STRING',length:500}
]
}
];
export const mockTableApi={
getTables:async ():Promise<Table[]> => {
awaitnew Promise(resolve => setTimeout(resolve,1000));
return mockTables;
},
getTableById:async (id:string):Promise<Table | undefined> => {
awaitnew Promise(resolve => setTimeout(resolve,500));
return mockTables.find(table => table.id === id);
}
};

File: ./src/components/ui/card.tsx
-------------------------------------------
import React from 'react';
export const Card:React.FC<{children:React.ReactNode}>=({children}) => (
<div className="bg-white rounded-lg shadow-md p-4">
{children}
</div>
);
export const CardHeader:React.FC<{children:React.ReactNode}>=({children}) => (
<div className="mb-4">
{children}
</div>
);
export const CardTitle:React.FC<{children:React.ReactNode}>=({children}) => (
<h2 className="text-xl font-bold text-gray-900">
{children}
</h2>
);
export const CardDescription:React.FC<{children:React.ReactNode}>=({children}) => (
<p className="text-sm text-gray-600">
{children}
</p>
);
export const CardContent:React.FC<{children:React.ReactNode}>=({children}) => (
<div>
{children}
</div>
);

File: ./src/components/ui/button.tsx
-------------------------------------------
import {cva,type VariantProps} from "class-variance-authority"
import {cn} from "@/lib/utils"
export const buttonVariants=cva(
"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
{
variants:{
variant:{
default:"bg-primary text-primary-foreground shadow hover:bg-primary/90",
destructive:"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
outline:"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
ghost:"hover:bg-accent hover:text-accent-foreground",
link:"text-primary underline-offset-4 hover:underline",
},
size:{
default:"h-9 px-4 py-2",
sm:"h-8 rounded-md px-3 text-xs",
lg:"h-10 rounded-md px-8",
icon:"h-9 w-9",
},
},
defaultVariants:{
variant:"default",
size:"default",
},
}
)
export interface ButtonProps
extends React.ButtonHTMLAttributes<HTMLButtonElement>,
VariantProps<typeof buttonVariants> {
asChild?:boolean
}
export const Button=({variant,size,children,className,...props}:ButtonProps) => {
return (
<button
className={cn(buttonVariants({variant,size}),className)}
{...props}
>
{children}
</button>
)
}
export default Button
File: ./src/components/ui/alert.tsx
-------------------------------------------
import * as React from "react"
import {cn} from "@/lib/utils"
const Alert=React.forwardRef<
HTMLDivElement,
React.HTMLAttributes<HTMLDivElement> & {
variant?:"default" | "destructive"
}
>(({className,variant="default",...props},ref) => (
<div
ref={ref}
role="alert"
className={cn(
"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
variant === "destructive" && "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
className
)}
{...props}
/>
))
Alert.displayName="Alert"
const AlertTitle=React.forwardRef<
HTMLParagraphElement,
React.HTMLAttributes<HTMLHeadingElement>
>(({className,...props},ref) => (
<h5
ref={ref}
className={cn("mb-1 font-medium leading-none tracking-tight",className)}
{...props}
/>
))
AlertTitle.displayName="AlertTitle"
const AlertDescription=React.forwardRef<
HTMLParagraphElement,
React.HTMLAttributes<HTMLParagraphElement>
>(({className,...props},ref) => (
<div
ref={ref}
className={cn("text-sm [&_p]:leading-relaxed",className)}
{...props}
/>
))
AlertDescription.displayName="AlertDescription"
export {Alert,AlertTitle,AlertDescription}

File: ./src/components/ui/alert-dialog.tsx
-------------------------------------------
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import {cn} from "@/lib/utils"
import {buttonVariants} from "@/components/ui/button"
const AlertDialog=AlertDialogPrimitive.Root
const AlertDialogTrigger=AlertDialogPrimitive.Trigger
const AlertDialogPortal=AlertDialogPrimitive.Portal
const AlertDialogOverlay=React.forwardRef<
React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({className,...props},ref) => (
<AlertDialogPrimitive.Overlay
className={cn(
"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
className
)}
{...props}
ref={ref}
/>
))
AlertDialogOverlay.displayName=AlertDialogPrimitive.Overlay.displayName
const AlertDialogContent=React.forwardRef<
React.ElementRef<typeof AlertDialogPrimitive.Content>,
React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({className,...props},ref) => (
<AlertDialogPortal>
<AlertDialogOverlay />
<AlertDialogPrimitive.Content
ref={ref}
className={cn(
"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
className
)}
{...props}
/>
</AlertDialogPortal>
))
AlertDialogContent.displayName=AlertDialogPrimitive.Content.displayName
const AlertDialogHeader=({
className,
...props
}:React.HTMLAttributes<HTMLDivElement>) => (
<div
className={cn(
"flex flex-col space-y-2 text-center sm:text-left",
className
)}
{...props}
/>
)
AlertDialogHeader.displayName="AlertDialogHeader"
const AlertDialogFooter=({
className,
...props
}:React.HTMLAttributes<HTMLDivElement>) => (
<div
className={cn(
"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
className
)}
{...props}
/>
)
AlertDialogFooter.displayName="AlertDialogFooter"
const AlertDialogTitle=React.forwardRef<
React.ElementRef<typeof AlertDialogPrimitive.Title>,
React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({className,...props},ref) => (
<AlertDialogPrimitive.Title
ref={ref}
className={cn("text-lg font-semibold",className)}
{...props}
/>
))
AlertDialogTitle.displayName=AlertDialogPrimitive.Title.displayName
const AlertDialogDescription=React.forwardRef<
React.ElementRef<typeof AlertDialogPrimitive.Description>,
React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({className,...props},ref) => (
<AlertDialogPrimitive.Description
ref={ref}
className={cn("text-sm text-muted-foreground",className)}
{...props}
/>
))
AlertDialogDescription.displayName=AlertDialogPrimitive.Description.displayName
const AlertDialogAction=React.forwardRef<
React.ElementRef<typeof AlertDialogPrimitive.Action>,
React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({className,...props},ref) => (
<AlertDialogPrimitive.Action
ref={ref}
className={cn(buttonVariants(),className)}
{...props}
/>
))
AlertDialogAction.displayName=AlertDialogPrimitive.Action.displayName
const AlertDialogCancel=React.forwardRef<
React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({className,...props},ref) => (
<AlertDialogPrimitive.Cancel
ref={ref}
className={cn(
buttonVariants({variant:"outline"}),
"mt-2 sm:mt-0",
className
)}
{...props}
/>
))
AlertDialogCancel.displayName=AlertDialogPrimitive.Cancel.displayName
export {
AlertDialog,
AlertDialogPortal,
AlertDialogOverlay,
AlertDialogTrigger,
AlertDialogContent,
AlertDialogHeader,
AlertDialogFooter,
AlertDialogTitle,
AlertDialogDescription,
AlertDialogAction,
AlertDialogCancel,
}

File: ./src/components/ui/table.tsx
-------------------------------------------
import * as React from "react"
import {cn} from "@/lib/utils"
const Table=React.forwardRef<
HTMLTableElement,
React.HTMLAttributes<HTMLTableElement>
>(({className,...props},ref) => (
<div className="relative w-full overflow-auto">
<table
ref={ref}
className={cn("w-full caption-bottom text-sm",className)}
{...props}
/>
</div>
))
Table.displayName="Table"
const TableHeader=React.forwardRef<
HTMLTableSectionElement,
React.HTMLAttributes<HTMLTableSectionElement>
>(({className,...props},ref) => (
<thead ref={ref} className={cn("[&_tr]:border-b",className)} {...props} />
))
TableHeader.displayName="TableHeader"
const TableBody=React.forwardRef<
HTMLTableSectionElement,
React.HTMLAttributes<HTMLTableSectionElement>
>(({className,...props},ref) => (
<tbody
ref={ref}
className={cn("[&_tr:last-child]:border-0",className)}
{...props}
/>
))
TableBody.displayName="TableBody"
const TableRow=React.forwardRef<
HTMLTableRowElement,
React.HTMLAttributes<HTMLTableRowElement>
>(({className,...props},ref) => (
<tr
ref={ref}
className={cn(
"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
className
)}
{...props}
/>
))
TableRow.displayName="TableRow"
const TableHead=React.forwardRef<
HTMLTableCellElement,
React.ThHTMLAttributes<HTMLTableCellElement>
>(({className,...props},ref) => (
<th
ref={ref}
className={cn(
"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
className
)}
{...props}
/>
))
TableHead.displayName="TableHead"
const TableCell=React.forwardRef<
HTMLTableCellElement,
React.TdHTMLAttributes<HTMLTableCellElement>
>(({className,...props},ref) => (
<td
ref={ref}
className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0",className)}
{...props}
/>
))
TableCell.displayName="TableCell"
export {
Table,
TableHeader,
TableBody,
TableRow,
TableHead,
TableCell,
}

File: ./src/components/tables/TableManagement.tsx
-------------------------------------------
import React,{useState} from 'react';
import {Button} from '@/components/ui/button';
import {Plus} from 'lucide-react';
import {useTableOperations} from '@/hooks/useTableOperations';
import {CreateTableForm} from './';
import {DataTableWithState} from './';
import {Alert,AlertDescription} from '@/components/ui/alert';
export default function TableManagement() {
const [showCreateForm,setShowCreateForm]=useState(false);
const {error}=useTableOperations();
return (
<div className="space-y-6">
{error && (
<Alert variant="destructive">
<AlertDescription>
{error instanceof Error ? error.message :'An error occurred'}
</AlertDescription>
</Alert>
)}
{!showCreateForm ? (
<>
<div className="flex justify-between items-center">
<h1 className="text-2xl font-bold">Tables</h1>
<Button onClick={() => setShowCreateForm(true)}>
<Plus className="h-4 w-4 mr-2" />
Create Table
</Button>
</div>
<DataTableWithState />
</>
) :(
<CreateTableForm onCancel={() => setShowCreateForm(false)} />
)}
</div>
);
}
File: ./src/components/tables/DataTableWithState.tsx
-------------------------------------------
import React,{useState} from 'react';
import {useTableOperations} from '@/hooks/useTableOperations';
import {
Table,
TableBody,
TableCell,
TableHead,
TableHeader,
TableRow,
} from '@/components/ui/table';
import {Button} from '@/components/ui/button';
import {Alert,AlertDescription} from '@/components/ui/alert';
import {Loader2,Pencil,Trash2} from "lucide-react";
import {DeleteTableDialog} from './DeleteTableDialog';
import type {Table as TableType} from '@/types/table';
export default function DataTableWithState() {
const {
tables,
isLoading,
isError,
error,
deleteTable,
isDeleting
}=useTableOperations();
const [tableToDelete,setTableToDelete]=useState<TableType | null>(null);
const handleDelete=async () => {
if (tableToDelete) {
try {
await deleteTable(tableToDelete.id);
} finally {
setTableToDelete(null);
}
}
};
if (isLoading) {
return (
<div className="w-full h-48 flex items-center justify-center">
<Loader2 className="h-8 w-8 animate-spin text-primary" />
</div>
);
}
if (isError) {
return (
<Alert variant="destructive" className="mb-4">
<AlertDescription>
{error instanceof Error ? error.message :'Failed to load tables'}
</AlertDescription>
</Alert>
);
}
return (
<>
<div className="rounded-md border">
<Table>
<TableHeader>
<TableRow>
<TableHead>Name</TableHead>
<TableHead>Display Name</TableHead>
<TableHead>Description</TableHead>
<TableHead>Access Level</TableHead>
<TableHead className="text-right">Actions</TableHead>
</TableRow>
</TableHeader>
<TableBody>
{tables?.length === 0 ? (
<TableRow>
<TableCell colSpan={5} className="text-center text-muted-foreground">
No tables found
</TableCell>
</TableRow>
) :(
tables?.map((table) => (
<TableRow key={table.id}>
<TableCell className="font-medium">{table.name}</TableCell>
<TableCell>{table.displayName}</TableCell>
<TableCell>{table.description || '-'}</TableCell>
<TableCell>{table.accessLevel}</TableCell>
<TableCell className="text-right">
<div className="flex justify-end gap-2">
<Button size="sm" variant="outline">
<Pencil className="h-4 w-4 mr-1" />
Edit
</Button>
<Button
size="sm"
variant="destructive"
onClick={() => setTableToDelete(table)}
>
<Trash2 className="h-4 w-4 mr-1" />
Delete
</Button>
</div>
</TableCell>
</TableRow>
))
)}
</TableBody>
</Table>
</div>
<DeleteTableDialog
table={tableToDelete}
open={!!tableToDelete}
onClose={() => setTableToDelete(null)}
onConfirm={handleDelete}
isDeleting={isDeleting}
/>
</>
);
}
File: ./src/components/tables/DeleteTableDialog.tsx
-------------------------------------------
import {AlertDialog,AlertDialogAction,AlertDialogCancel,AlertDialogContent,AlertDialogDescription,AlertDialogFooter,AlertDialogHeader,AlertDialogTitle} from '@/components/ui/alert-dialog';
import {Table} from '@/types/table';
interface Props {
table:Table | null;
open:boolean;
onClose:() => void;
onConfirm:() => void;
isDeleting:boolean;
}
export function DeleteTableDialog({table,open,onClose,onConfirm,isDeleting}:Props) {
return (
<AlertDialog open={open} onOpenChange={onClose}>
<AlertDialogContent>
<AlertDialogHeader>
<AlertDialogTitle>Delete Table</AlertDialogTitle>
<AlertDialogDescription>
Are you sure you want to delete table "{table?.displayName}"? This action cannot be undone.
</AlertDialogDescription>
</AlertDialogHeader>
<AlertDialogFooter>
<AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>
<AlertDialogAction
disabled={isDeleting}
onClick={(e) => {
e.preventDefault();
onConfirm();
}}
className="bg-red-600 hover:bg-red-700"
>
{isDeleting ? 'Deleting...' :'Delete'}
</AlertDialogAction>
</AlertDialogFooter>
</AlertDialogContent>
</AlertDialog>
);
}

File: ./src/components/tables/EditTableForm.tsx
-------------------------------------------
import React,{useState} from 'react';
import {useTableOperations} from '@/hooks/useTableOperations';
import {
Card,
CardHeader,
CardTitle,
CardDescription,
CardContent,
} from '@/components/ui/card';
import {Button} from '@/components/ui/button';
import {Alert,AlertDescription} from '@/components/ui/alert';
import {Loader2} from 'lucide-react';
import {Table} from '@/types/table';
interface Props {
table:Table;
onCancel:() => void;
onSuccess:() => void;
}
const EditTableForm=({table,onCancel,onSuccess}:Props) => {
const {updateTable,isUpdating}=useTableOperations();
const [error,setError]=useState('');
const [formData,setFormData]=useState({
displayName:table.displayName,
description:table.description || '',
accessLevel:table.accessLevel
});
const handleSubmit=async (e:React.FormEvent) => {
e.preventDefault();
setError('');
if (!formData.displayName) {
setError('Display Name is required');
return;
}
try {
await updateTable({
id:table.id,
table:formData
});
onSuccess();
} catch (err) {
setError(err instanceof Error ? err.message :'Failed to update table');
}
};
return (
<Card className="w-full max-w-2xl mx-auto">
<CardHeader>
<CardTitle>Edit Table:{table.name}</CardTitle>
<CardDescription>Update table properties</CardDescription>
</CardHeader>
<CardContent>
<form onSubmit={handleSubmit} className="space-y-6">
{error && (
<Alert variant="destructive">
<AlertDescription>{error}</AlertDescription>
</Alert>
)}
<div className="space-y-4">
<div className="space-y-2">
<label className="text-sm font-medium">Display Name</label>
<input
type="text"
className="w-full p-2 border rounded"
value={formData.displayName}
onChange={e => setFormData({...formData,displayName:e.target.value})}
/>
</div>
<div className="space-y-2">
<label className="text-sm font-medium">Description</label>
<textarea
className="w-full p-2 border rounded"
value={formData.description}
onChange={e => setFormData({...formData,description:e.target.value})}
rows={3}
/>
</div>
<div className="space-y-2">
<label className="text-sm font-medium">Access Level</label>
<select
className="w-full p-2 border rounded"
value={formData.accessLevel}
onChange={e => setFormData({...formData,accessLevel:e.target.value})}
>
<option value="SYSTEM">System</option>
<option value="CLIENT">Client</option>
<option value="ORGANIZATION">Organization</option>
<option value="CLIENT_ORGANIZATION">Client Organization</option>
</select>
</div>
</div>
<div className="flex justify-end gap-4 pt-4">
<Button type="button" variant="outline" onClick={onCancel}>
Cancel
</Button>
<Button type="submit" disabled={isUpdating}>
{isUpdating && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
Update Table
</Button>
</div>
</form>
</CardContent>
</Card>
);
};
export default EditTableForm;
File: ./src/components/tables/index.ts
-------------------------------------------
export {default as DataTableWithState} from './DataTableWithState';
export {default as CreateTableForm} from './CreateTableForm';
export {default as TableManagement} from './TableManagement';
export {DeleteTableDialog} from './DeleteTableDialog';
export {default as EditTableForm} from './EditTableForm';
File: ./src/components/tables/CreateTableForm.tsx
-------------------------------------------
import {useState} from 'react';
import {useTableOperations} from '@/hooks/useTableOperations';
import {
Card,
CardHeader,
CardTitle,
CardDescription,
CardContent
} from '@/components/ui/card';
import {Button} from '@/components/ui/button';
import {Alert,AlertDescription} from '@/components/ui/alert';
import {Plus,Minus,Loader2} from 'lucide-react';
import {CreateTableRequest} from '@/types/table';
interface Props {
onCancel:() => void;
}
const CreateTableForm=({onCancel}:Props) => {
const {createTable,isCreating}=useTableOperations();
const [columns,setColumns]=useState([{
name:'',
displayName:'',
type:'STRING',
mandatory:false,
length:null,
precision:null,
scale:null
}]);
const [formData,setFormData]=useState({
name:'',
displayName:'',
description:'',
accessLevel:'ORGANIZATION'
});
const [error,setError]=useState('');
const handleAddColumn=() => {
setColumns([...columns,{
name:'',
displayName:'',
type:'STRING',
mandatory:false,
length:null,
precision:null,
scale:null
}]);
};
const handleRemoveColumn=(index:number) => {
setColumns(columns.filter((_,i) => i !== index));
};
const handleColumnChange=(index:number,field:string,value:any) => {
const updatedColumns=[...columns];
updatedColumns[index]={...updatedColumns[index],[field]:value};
setColumns(updatedColumns);
};
const handleSubmit=async (e:React.FormEvent) => {
e.preventDefault();
setError('');
if (!formData.name || !formData.displayName) {
setError('Name and Display Name are required');
return;
}
if (columns.length === 0) {
setError('At least one column is required');
return;
}
const columnErrors=columns.reduce((errors:string[],col,index) => {
if (!col.name || !col.displayName) {
errors.push(`Column ${index + 1}:Name and Display Name are required`);
}
if (col.type === 'STRING' && !col.length) {
errors.push(`Column ${index + 1}:Length is required for String type`);
}
if (col.type === 'DECIMAL' && (!col.precision || !col.scale)) {
errors.push(`Column ${index + 1}:Precision and Scale are required for Decimal type`);
}
return errors;
},[]);
if (columnErrors.length> 0) {
setError(columnErrors.join('\n'));
return;
}
try {
const tableData:CreateTableRequest={
...formData,
columns:columns.map(col => ({
...col,
length:col.type === 'STRING' ? col.length :undefined,
precision:col.type === 'DECIMAL' ? col.precision :undefined,
scale:col.type === 'DECIMAL' ? col.scale :undefined,
}))
};
await createTable(tableData);
onCancel();
} catch (err) {
console.error('Create table error:',err);
setError(err instanceof Error ? err.message :'Failed to create table');
}
};
return (
<Card className="w-full max-w-4xl mx-auto">
<CardHeader>
<CardTitle>Create New Table</CardTitle>
<CardDescription>Define your table structure and columns</CardDescription>
</CardHeader>
<CardContent>
<form onSubmit={handleSubmit} className="space-y-6">
{error && (
<Alert variant="destructive">
<AlertDescription>
{error.split('\n').map((line,i) => (
<div key={i}>{line}</div>
))}
</AlertDescription>
</Alert>
)}
<div className="space-y-4">
<div className="grid grid-cols-2 gap-4">
<div className="space-y-2">
<label className="text-sm font-medium">Name</label>
<input
type="text"
className="w-full p-2 border rounded"
value={formData.name}
onChange={e => setFormData({...formData,name:e.target.value.toLowerCase()})}
placeholder="table_name"
pattern="^[a-z][a-z0-9_]*$"
title="Must start with lowercase letter,followed by lowercase letters,numbers,or underscores"
/>
</div>
<div className="space-y-2">
<label className="text-sm font-medium">Display Name</label>
<input
type="text"
className="w-full p-2 border rounded"
value={formData.displayName}
onChange={e => setFormData({...formData,displayName:e.target.value})}
placeholder="Table Name"
/>
</div>
</div>
<div className="space-y-2">
<label className="text-sm font-medium">Description</label>
<textarea
className="w-full p-2 border rounded"
value={formData.description}
onChange={e => setFormData({...formData,description:e.target.value})}
rows={3}
/>
</div>
<div className="space-y-2">
<label className="text-sm font-medium">Access Level</label>
<select
className="w-full p-2 border rounded"
value={formData.accessLevel}
onChange={e => setFormData({...formData,accessLevel:e.target.value})}
>
<option value="SYSTEM">System</option>
<option value="CLIENT">Client</option>
<option value="ORGANIZATION">Organization</option>
<option value="CLIENT_ORGANIZATION">Client Organization</option>
</select>
</div>
</div>
<div className="space-y-4">
<div className="flex justify-between items-center">
<h3 className="text-lg font-medium">Columns</h3>
<Button
type="button"
onClick={handleAddColumn}
variant="outline"
size="sm"
>
<Plus className="h-4 w-4 mr-2" />
Add Column
</Button>
</div>
{columns.map((column,index) => (
<div key={index} className="p-4 border rounded space-y-4">
<div className="flex justify-between">
<h4 className="font-medium">Column {index + 1}</h4>
{columns.length> 1 && (
<Button
type="button"
variant="destructive"
size="sm"
onClick={() => handleRemoveColumn(index)}
>
<Minus className="h-4 w-4" />
</Button>
)}
</div>
<div className="grid grid-cols-2 gap-4">
<div className="space-y-2">
<label className="text-sm font-medium">Name</label>
<input
type="text"
className="w-full p-2 border rounded"
value={column.name}
onChange={e => handleColumnChange(index,'name',e.target.value.toLowerCase())}
placeholder="column_name"
pattern="^[a-z][a-z0-9_]*$"
title="Must start with lowercase letter,followed by lowercase letters,numbers,or underscores"
/>
</div>
<div className="space-y-2">
<label className="text-sm font-medium">Display Name</label>
<input
type="text"
className="w-full p-2 border rounded"
value={column.displayName}
onChange={e => handleColumnChange(index,'displayName',e.target.value)}
placeholder="Column Name"
/>
</div>
</div>
<div className="grid grid-cols-2 gap-4">
<div className="space-y-2">
<label className="text-sm font-medium">Type</label>
<select
className="w-full p-2 border rounded"
value={column.type}
onChange={e => handleColumnChange(index,'type',e.target.value)}
>
<option value="STRING">String</option>
<option value="INTEGER">Integer</option>
<option value="DECIMAL">Decimal</option>
<option value="BOOLEAN">Boolean</option>
<option value="DATE">Date</option>
<option value="TIMESTAMP">Timestamp</option>
<option value="BINARY">Binary</option>
</select>
</div>
<div className="space-y-2">
<label className="text-sm font-medium">Mandatory</label>
<div className="pt-2">
<input
type="checkbox"
checked={column.mandatory}
onChange={e => handleColumnChange(index,'mandatory',e.target.checked)}
className="mr-2"
/>
<span className="text-sm">Required field</span>
</div>
</div>
</div>
{column.type === 'STRING' && (
<div className="space-y-2">
<label className="text-sm font-medium">Length</label>
<input
type="number"
className="w-full p-2 border rounded"
value={column.length || ''}
onChange={e => handleColumnChange(index,'length',parseInt(e.target.value) || null)}
min="1"
max="4000"
/>
</div>
)}
{column.type === 'DECIMAL' && (
<div className="grid grid-cols-2 gap-4">
<div className="space-y-2">
<label className="text-sm font-medium">Precision</label>
<input
type="number"
className="w-full p-2 border rounded"
value={column.precision || ''}
onChange={e => handleColumnChange(index,'precision',parseInt(e.target.value) || null)}
min="1"
max="38"
/>
</div>
<div className="space-y-2">
<label className="text-sm font-medium">Scale</label>
<input
type="number"
className="w-full p-2 border rounded"
value={column.scale || ''}
onChange={e => handleColumnChange(index,'scale',parseInt(e.target.value) || null)}
min="0"
max="38"
/>
</div>
</div>
)}
</div>
))}
</div>
<div className="flex justify-end gap-4 pt-4">
<Button type="button" variant="outline" onClick={onCancel}>
Cancel
</Button>
<Button type="submit" disabled={isCreating}>
{isCreating && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
Create Table
</Button>
</div>
</form>
</CardContent>
</Card>
);
};
export default CreateTableForm;
File: ./src/App.tsx
-------------------------------------------
import QueryProvider from './lib/providers/QueryProvider';
import TableManagement from './components/tables/TableManagement';
function App() {
return (
<QueryProvider>
<div className="container mx-auto py-10">
<TableManagement />
</div>
</QueryProvider>
);
}
export default App;
File: ./src/lib/providers/QueryProvider.tsx
-------------------------------------------
import {QueryClient,QueryClientProvider} from '@tanstack/react-query';
import {ReactNode} from 'react';
const queryClient=new QueryClient({
defaultOptions:{
queries:{
refetchOnWindowFocus:false,
retry:1,
},
},
});
export function QueryProvider({children}:{children:ReactNode}) {
return (
<QueryClientProvider client={queryClient}>
{children}
</QueryClientProvider>
);
}
export default QueryProvider;
File: ./src/lib/utils.ts
-------------------------------------------
import {clsx,type ClassValue} from "clsx"
import {twMerge} from "tailwind-merge"
export function cn(...inputs:ClassValue[]) {
return twMerge(clsx(inputs))
}

File: ./package.json
-------------------------------------------
{
"name":"blackerp-frontend",
"private":true,
"version":"0.1.0",
"type":"module",
"scripts":{
"dev":"vite",
"build":"tsc && vite build",
"preview":"vite preview"
},
"dependencies":{
"@radix-ui/react-alert-dialog":"^1.1.2",
"@radix-ui/react-dialog":"^1.1.2",
"@radix-ui/react-slot":"^1.1.0",
"@tanstack/react-query":"^5.61.4",
"class-variance-authority":"^0.7.1",
"clsx":"^2.1.1",
"lucide-react":"^0.263.1",
"react":"^18.2.0",
"react-dom":"^18.2.0",
"tailwind-merge":"^2.5.5",
"tailwindcss-animate":"^1.0.7"
},
"devDependencies":{
"@shadcn/ui":"^0.0.4",
"@types/node":"^20.8.2",
"@types/react":"^18.2.25",
"@types/react-dom":"^18.2.10",
"@vitejs/plugin-react":"^4.1.0",
"autoprefixer":"^10.4.16",
"postcss":"^8.4.31",
"tailwindcss":"^3.3.5",
"typescript":"^5.2.2",
"vite":"^4.4.9"
}
}
