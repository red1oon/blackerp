Generating folder structure...
-------------------------------------------
.
├── frontend_listing.txt
├── frontend.sh
├── generate_project_listing.sh
├── index.html
├── package.json
├── package-lock.json
├── project_listing.txt
├── README.md
├── src
│   ├── api
│   │   ├── mockData.ts
│   │   └── tableApi.ts
│   ├── App.tsx
│   ├── assets
│   ├── components
│   │   ├── tables
│   │   │   ├── DataTableWithState.tsx
│   │   │   ├── index.ts
│   │   │   └── TableManagement.tsx
│   │   └── ui
│   │   ├── alert.tsx
│   │   ├── button.tsx
│   │   ├── card.tsx
│   │   └── table.tsx
│   ├── hooks
│   │   └── useTableOperations.ts
│   ├── layouts
│   ├── lib
│   │   ├── providers
│   │   │   └── QueryProvider.tsx
│   │   ├── utils
│   │   └── utils.ts
│   ├── main
│   │   └── resources
│   │   └── db
│   │   └── migration
│   ├── main.tsx
│   ├── pages
│   ├── types
│   │   └── table.ts
│   └── utils
├── tsconfig.json
└── tsconfig.node.json

19 directories, 25 files


Generating file details...
-------------------------------------------

File: ./src/hooks/useTableOperations.ts
-------------------------------------------
import {useQuery,useMutation,useQueryClient} from '@tanstack/react-query';
import {Table} from '../types/table';
import {tableApi} from '../api/tableApi';
export function useTableOperations() {
const queryClient=useQueryClient();
const {
data:tables,
isLoading,
error,
}=useQuery<Table[]>({
queryKey:['tables'],
queryFn:() => tableApi.getTables(),
});
const createTableMutation=useMutation({
mutationFn:(newTable:Omit<Table,'id'>) => tableApi.createTable(newTable),
onSuccess:() => {
queryClient.invalidateQueries({queryKey:['tables']});
},
});
const updateTableMutation=useMutation({
mutationFn:({id,table}:{id:string;table:Partial<Table>}) =>
tableApi.updateTable(id,table),
onSuccess:() => {
queryClient.invalidateQueries({queryKey:['tables']});
},
});
const deleteTableMutation=useMutation({
mutationFn:(id:string) => tableApi.deleteTable(id),
onSuccess:() => {
queryClient.invalidateQueries({queryKey:['tables']});
},
});
return {
tables,
isLoading,
error,
createTable:createTableMutation.mutate,
updateTable:updateTableMutation.mutate,
deleteTable:deleteTableMutation.mutate,
isCreating:createTableMutation.isPending,
isUpdating:updateTableMutation.isPending,
isDeleting:deleteTableMutation.isPending,
};
}
File: ./src/main.tsx
-------------------------------------------
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'
ReactDOM.createRoot(document.getElementById('root')!).render(
<React.StrictMode>
<App />
</React.StrictMode>,
)

File: ./src/types/table.ts
-------------------------------------------
export interface Column {
name:string;
type:string;
mandatory?:boolean;
length?:number;
precision?:number;
scale?:number;
defaultValue?:string;
}
export interface Table {
id:string;
name:string;
displayName:string;
description?:string;
accessLevel:string;
columns:Column[];
}

File: ./src/api/tableApi.ts
-------------------------------------------
import {Table} from '../types/table';
export const tableApi={
async getTables():Promise<Table[]> {
const response=await fetch(`${BASE_URL}/tables`);
if (!response.ok) thrownew Error('Failed to fetch tables');
return response.json();
},
async getTableById(id:string):Promise<Table> {
const response=await fetch(`${BASE_URL}/tables/${id}`);
if (!response.ok) thrownew Error('Failed to fetch table');
return response.json();
},
async createTable(table:Omit<Table,'id'>):Promise<Table> {
const response=await fetch(`${BASE_URL}/tables`,{
method:'POST',
headers:{
'Content-Type':'application/json',
},
body:JSON.stringify(table),
});
if (!response.ok) thrownew Error('Failed to create table');
return response.json();
},
async updateTable(id:string,table:Partial<Table>):Promise<Table> {
const response=await fetch(`${BASE_URL}/tables/${id}`,{
method:'PUT',
headers:{
'Content-Type':'application/json',
},
body:JSON.stringify(table),
});
if (!response.ok) thrownew Error('Failed to update table');
return response.json();
},
async deleteTable(id:string):Promise<void> {
const response=await fetch(`${BASE_URL}/tables/${id}`,{
method:'DELETE',
});
if (!response.ok) thrownew Error('Failed to delete table');
}
};
File: ./src/api/mockData.ts
-------------------------------------------
import {Table} from '../types/table';
export const mockTables:Table[]=[
{
id:'1',
name:'business_partner',
displayName:'Business Partner',
description:'Business partner master data including customers and vendors',
accessLevel:'ORGANIZATION',
columns:[
{name:'id',type:'UUID',mandatory:true},
{name:'name',type:'STRING',length:100,mandatory:true},
{name:'tax_id',type:'STRING',length:20},
{name:'email',type:'STRING',length:100},
{name:'phone',type:'STRING',length:20},
{name:'active',type:'BOOLEAN',defaultValue:'true'}
]
},
{
id:'2',
name:'product',
displayName:'Product',
description:'Product master data with inventory and pricing information',
accessLevel:'ORGANIZATION',
columns:[
{name:'id',type:'UUID',mandatory:true},
{name:'code',type:'STRING',length:40,mandatory:true},
{name:'name',type:'STRING',length:100,mandatory:true},
{name:'description',type:'STRING',length:255},
{name:'price',type:'DECIMAL',precision:10,scale:2,mandatory:true},
{name:'cost',type:'DECIMAL',precision:10,scale:2},
{name:'stock',type:'INTEGER',defaultValue:'0'}
]
},
{
id:'3',
name:'sales_order',
displayName:'Sales Order',
description:'Customer orders with line items and tracking',
accessLevel:'ORGANIZATION',
columns:[
{name:'id',type:'UUID',mandatory:true},
{name:'order_date',type:'TIMESTAMP',mandatory:true},
{name:'customer_id',type:'UUID',mandatory:true},
{name:'total_amount',type:'DECIMAL',precision:12,scale:2},
{name:'status',type:'STRING',length:20,defaultValue:'DRAFT'},
{name:'notes',type:'STRING',length:500}
]
}
];
export const mockTableApi={
getTables:async ():Promise<Table[]> => {
awaitnew Promise(resolve => setTimeout(resolve,1000));
return mockTables;
},
getTableById:async (id:string):Promise<Table | undefined> => {
awaitnew Promise(resolve => setTimeout(resolve,500));
return mockTables.find(table => table.id === id);
}
};

File: ./src/components/ui/card.tsx
-------------------------------------------
import React from 'react';
export const Card:React.FC<{children:React.ReactNode}>=({children}) => (
<div className="bg-white rounded-lg shadow-md p-4">
{children}
</div>
);
export const CardHeader:React.FC<{children:React.ReactNode}>=({children}) => (
<div className="mb-4">
{children}
</div>
);
export const CardTitle:React.FC<{children:React.ReactNode}>=({children}) => (
<h2 className="text-xl font-bold text-gray-900">
{children}
</h2>
);
export const CardDescription:React.FC<{children:React.ReactNode}>=({children}) => (
<p className="text-sm text-gray-600">
{children}
</p>
);
export const CardContent:React.FC<{children:React.ReactNode}>=({children}) => (
<div>
{children}
</div>
);

File: ./src/components/ui/button.tsx
-------------------------------------------
import React from 'react';
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
variant?:'default' | 'outline' | 'destructive';
size?:'sm' | 'md' | 'lg';
children:React.ReactNode;
}
export const Button:React.FC<ButtonProps>=({
variant='default',
size='md',
children,
className='',
...props
}) => {
const baseStyles='inline-flex items-center rounded font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2';
const variants={
default:'bg-slate-900 text-white hover:bg-slate-800',
outline:'border border-slate-200 bg-transparent hover:bg-slate-100 text-slate-900',
destructive:'bg-red-600 text-white hover:bg-red-700'
};
const sizes={
sm:'px-3 py-1.5 text-sm',
md:'px-4 py-2',
lg:'px-6 py-3'
};
return (
<button
className={`${baseStyles} ${variants[variant]} ${sizes[size]} ${className}`}
{...props}
>
{children}
</button>
);
};

File: ./src/components/ui/alert.tsx
-------------------------------------------
import * as React from "react"
import {cn} from "@/lib/utils"
const Alert=React.forwardRef<
HTMLDivElement,
React.HTMLAttributes<HTMLDivElement> & {
variant?:"default" | "destructive"
}
>(({className,variant="default",...props},ref) => (
<div
ref={ref}
role="alert"
className={cn(
"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
variant === "destructive" && "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
className
)}
{...props}
/>
))
Alert.displayName="Alert"
const AlertTitle=React.forwardRef<
HTMLParagraphElement,
React.HTMLAttributes<HTMLHeadingElement>
>(({className,...props},ref) => (
<h5
ref={ref}
className={cn("mb-1 font-medium leading-none tracking-tight",className)}
{...props}
/>
))
AlertTitle.displayName="AlertTitle"
const AlertDescription=React.forwardRef<
HTMLParagraphElement,
React.HTMLAttributes<HTMLParagraphElement>
>(({className,...props},ref) => (
<div
ref={ref}
className={cn("text-sm [&_p]:leading-relaxed",className)}
{...props}
/>
))
AlertDescription.displayName="AlertDescription"
export {Alert,AlertTitle,AlertDescription}

File: ./src/components/ui/table.tsx
-------------------------------------------
import * as React from "react"
import {cn} from "@/lib/utils"
const Table=React.forwardRef<
HTMLTableElement,
React.HTMLAttributes<HTMLTableElement>
>(({className,...props},ref) => (
<div className="relative w-full overflow-auto">
<table
ref={ref}
className={cn("w-full caption-bottom text-sm",className)}
{...props}
/>
</div>
))
Table.displayName="Table"
const TableHeader=React.forwardRef<
HTMLTableSectionElement,
React.HTMLAttributes<HTMLTableSectionElement>
>(({className,...props},ref) => (
<thead ref={ref} className={cn("[&_tr]:border-b",className)} {...props} />
))
TableHeader.displayName="TableHeader"
const TableBody=React.forwardRef<
HTMLTableSectionElement,
React.HTMLAttributes<HTMLTableSectionElement>
>(({className,...props},ref) => (
<tbody
ref={ref}
className={cn("[&_tr:last-child]:border-0",className)}
{...props}
/>
))
TableBody.displayName="TableBody"
const TableRow=React.forwardRef<
HTMLTableRowElement,
React.HTMLAttributes<HTMLTableRowElement>
>(({className,...props},ref) => (
<tr
ref={ref}
className={cn(
"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
className
)}
{...props}
/>
))
TableRow.displayName="TableRow"
const TableHead=React.forwardRef<
HTMLTableCellElement,
React.ThHTMLAttributes<HTMLTableCellElement>
>(({className,...props},ref) => (
<th
ref={ref}
className={cn(
"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
className
)}
{...props}
/>
))
TableHead.displayName="TableHead"
const TableCell=React.forwardRef<
HTMLTableCellElement,
React.TdHTMLAttributes<HTMLTableCellElement>
>(({className,...props},ref) => (
<td
ref={ref}
className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0",className)}
{...props}
/>
))
TableCell.displayName="TableCell"
export {
Table,
TableHeader,
TableBody,
TableRow,
TableHead,
TableCell,
}

File: ./src/components/tables/TableManagement.tsx
-------------------------------------------
import React from 'react';
import {useQuery} from '@tanstack/react-query';
import {Card,CardContent,CardHeader,CardTitle} from '@/components/ui/card';
import {Table,TableBody,TableCell,TableHead,TableHeader,TableRow} from '@/components/ui/table';
interface TableData {
id:string;
name:string;
displayName:string;
description?:string;
accessLevel:string;
}
interface TablesResponse {
tables:TableData[];
}
export default function TableManagement() {
const {data,isLoading,error}=useQuery<TablesResponse>({
queryKey:['tables'],
queryFn:async () => {
if (!response.ok) thrownew Error('Failed to fetch tables');
return response.json();
}
});
if (isLoading) {
return <div>Loading tables...</div>;
}
if (error) {
return <div>Error:{error instanceof Error ? error.message :'Unknown error'}</div>;
}
return (
<Card>
<CardHeader>
<CardTitle>Tables</CardTitle>
</CardHeader>
<CardContent>
<Table>
<TableHeader>
<TableRow>
<TableHead>Name</TableHead>
<TableHead>Display Name</TableHead>
<TableHead>Description</TableHead>
<TableHead>Access Level</TableHead>
</TableRow>
</TableHeader>
<TableBody>
{data?.tables.map((table) => (
<TableRow key={table.id}>
<TableCell>{table.name}</TableCell>
<TableCell>{table.displayName}</TableCell>
<TableCell>{table.description}</TableCell>
<TableCell>{table.accessLevel}</TableCell>
</TableRow>
))}
</TableBody>
</Table>
</CardContent>
</Card>
);
}
File: ./src/components/tables/DataTableWithState.tsx
-------------------------------------------
import React from 'react';
import {useQuery} from '@tanstack/react-query';
import {
Table,
TableBody,
TableCell,
TableHead,
TableHeader,
TableRow,
} from '@/components/ui/table';
import {Button} from '@/components/ui/button';
import {Alert,AlertTitle,AlertDescription} from '@/components/ui/alert';
import {Loader2,Pencil,Trash2} from "lucide-react";
export interface Table {
id:string;
name:string;
displayName:string;
description?:string;
accessLevel:string;
}
export default function DataTableWithState() {
const {
data:tables,
isLoading,
isError,
error
}=useQuery<Table[]>({
queryKey:['tables'],
queryFn:async () => {
if (!response.ok) {
thrownew Error('Failed to fetch tables');
}
return response.json();
}
});
if (isLoading) {
return (
<div className="w-full h-48 flex items-center justify-center">
<Loader2 className="h-8 w-8 animate-spin text-primary" />
</div>
);
}
if (isError) {
return (
<Alert variant="destructive" className="mb-4">
<AlertTitle>Error</AlertTitle>
<AlertDescription>
{error instanceof Error ? error.message :'Failed to load tables'}
</AlertDescription>
</Alert>
);
}
return (
<div className="rounded-md border">
<Table>
<TableHeader>
<TableRow>
<TableHead>Name</TableHead>
<TableHead>Display Name</TableHead>
<TableHead>Description</TableHead>
<TableHead>Access Level</TableHead>
<TableHead className="text-right">Actions</TableHead>
</TableRow>
</TableHeader>
<TableBody>
{tables?.length === 0 ? (
<TableRow>
<TableCell colSpan={5} className="text-center text-muted-foreground">
No tables found
</TableCell>
</TableRow>
) :(
tables?.map((table) => (
<TableRow key={table.id}>
<TableCell className="font-medium">{table.name}</TableCell>
<TableCell>{table.displayName}</TableCell>
<TableCell>{table.description || '-'}</TableCell>
<TableCell>{table.accessLevel}</TableCell>
<TableCell className="text-right">
<div className="flex justify-end gap-2">
<Button size="sm" variant="outline">
<Pencil className="h-4 w-4 mr-1" />
Edit
</Button>
<Button size="sm" variant="destructive">
<Trash2 className="h-4 w-4 mr-1" />
Delete
</Button>
</div>
</TableCell>
</TableRow>
))
)}
</TableBody>
</Table>
</div>
);
}
File: ./src/components/tables/index.ts
-------------------------------------------
export {default as DataTableWithState} from './DataTableWithState';

File: ./src/App.tsx
-------------------------------------------
import QueryProvider from './lib/providers/QueryProvider';
import TableManagement from './components/tables/TableManagement';
function App() {
return (
<QueryProvider>
<div className="container mx-auto py-10">
<TableManagement />
</div>
</QueryProvider>
);
}
export default App;
File: ./src/lib/providers/QueryProvider.tsx
-------------------------------------------
import {QueryClient,QueryClientProvider} from '@tanstack/react-query';
import {ReactNode} from 'react';
const queryClient=new QueryClient({
defaultOptions:{
queries:{
refetchOnWindowFocus:false,
retry:1,
},
},
});
export function QueryProvider({children}:{children:ReactNode}) {
return (
<QueryClientProvider client={queryClient}>
{children}
</QueryClientProvider>
);
}
export default QueryProvider;
File: ./src/lib/utils.ts
-------------------------------------------
import {clsx,type ClassValue} from "clsx"
import {twMerge} from "tailwind-merge"
export function cn(...inputs:ClassValue[]) {
return twMerge(clsx(inputs))
}

File: ./package.json
-------------------------------------------
{
"name":"blackerp-frontend",
"private":true,
"version":"0.1.0",
"type":"module",
"scripts":{
"dev":"vite",
"build":"tsc && vite build",
"preview":"vite preview"
},
"dependencies":{
"@radix-ui/react-alert-dialog":"^1.1.2",
"@radix-ui/react-dialog":"^1.1.2",
"@radix-ui/react-slot":"^1.1.0",
"@tanstack/react-query":"^5.61.4",
"class-variance-authority":"^0.7.1",
"clsx":"^2.1.1",
"lucide-react":"^0.263.1",
"react":"^18.2.0",
"react-dom":"^18.2.0",
"tailwind-merge":"^2.5.5",
"tailwindcss-animate":"^1.0.7"
},
"devDependencies":{
"@shadcn/ui":"^0.0.4",
"@types/node":"^20.8.2",
"@types/react":"^18.2.25",
"@types/react-dom":"^18.2.10",
"@vitejs/plugin-react":"^4.1.0",
"autoprefixer":"^10.4.16",
"postcss":"^8.4.31",
"tailwindcss":"^3.3.5",
"typescript":"^5.2.2",
"vite":"^4.4.9"
}
}
